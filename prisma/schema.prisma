// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String
  status      ProductStatus
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  images      ProductImage[]
  options     ProductOption[]
  skus        ProductSku[]
}

model ProductImage {
  id           Int     @id @default(autoincrement())
  url          String
  blobName     String
  originalName String
  productId    Int
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductOption {
  id        Int                  @id @default(autoincrement())
  label     String
  productId Int
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]
}

// TODO: Delete related row when product is deleted
model ProductOptionValue {
  id       Int           @id @default(autoincrement())
  value    String
  optionId Int
  option   ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  skus     ProductSku[]
}

model ProductSku {
  id        Int                  @id @default(autoincrement())
  sku       String               @unique
  price     Decimal              @db.Decimal(6, 2)
  productId Int
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]
}
